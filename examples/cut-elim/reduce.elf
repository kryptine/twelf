%%% Strongly normalising system for cut elimination
%%% Cut reductions, strict substitution
%%% Author: Frank Pfenning
%%% Implementing Urban & Bierman'01

% Logical cuts
-l-> : # -> # -> type.
%infix none 10 -l->.
%mode -l-> +D -E.

log_not : (cut ([a] notr ([x] M x) a) ([y] notl ([b] N b) y))
	  -l-> (cut ([b] N b) ([x] M x)).
log_and1 : (cut ([b] andr ([a1] M1 a1) ([a2] M2 a2) b)
                ([y] andl1 ([x] N x) y))
          -l-> (cut ([a1] M1 a1) ([x] N x)).
log_and2 : (cut ([b] andr ([a1] M1 a1) ([a2] M2 a2) b)
                ([y] andl2 ([x] N x) y))
          -l-> (cut ([a2] M2 a2) ([x] N x)).

log_or1 : (cut ([b] orr1 ([a] M a) b)
	       ([y] orl ([x1] N1 x1) ([x2] N2 x2) y))
          -l-> (cut ([a] M a) ([x1] N1 x1)).
log_or2 : (cut ([b] orr2 ([a] M a) b)
	       ([y] orl ([x1] N1 x1) ([x2] N2 x2) y))
          -l-> (cut ([a] M a) ([x2] N2 x2)).

log_imp_l : (cut ([b] impr ([x] [a] M x a) b)
	         ([z] impl ([c] N c) ([y] P y) z))
          -l-> (cut ([a] cut ([c] N c) ([x] M x a)) ([y] P y)).
log_imp_r : (cut ([b] impr ([x] [a] M x a) b)
	         ([z] impl ([c] N c) ([y] P y) z))
          -l-> (cut ([c] N c) ([x] cut ([a] M x a) ([y] P y))).
log_ax_r : (cut ([a] M a) ([x] axiom x B))
          -l-> M B.
log_ax_l : (cut ([a] axiom Y a) ([x] M x))
          -l-> M Y.

%terminates [] (-l-> D E).

% Strict substitution
% To incorporate side conditions, this only succeeds
% when there are strict occurrences of the variable
% to be substituted and fails otherwise.

substp : (pos A -> #) -> (neg A -> #) -> # -> type.
substn : (neg A -> #) -> (pos A -> #) -> # -> type.
%mode substp +D +E -F.
%mode substn +D +E -F.

subst1 : substp ([c] axiom X c) ([y] P y) (P X).
subst2 : substn ([y] axiom y A) ([c] P c) (P A).
% subst3a: strict occurrence of a in M
subst3a : substp ([a] notr ([x] M a x) a) ([y] P y)
	   (cut ([a] notr ([x] M' x) a) ([y] P y))
	   <- ({x} substp ([a] M a x) ([y] P y) (M' x)).
% subst3b: no strict occurrence of a in M
subst3b : substp ([a] notr ([x] M x) a) ([y] P y)
	   (cut ([a] notr ([x] M x) a) ([y] P y)).
subst4a : substn ([x] notl ([a] M x a) x) ([c] P c)
	   (cut ([c] P c) ([x] notl ([a] M' a) x))
	   <- ({a} substn ([x] M x a) ([c] P c) (M' a)).
subst4b : substn ([x] notl ([a] M a) x) ([c] P c)
	   (cut ([c] P c) ([x] notl ([a] M a) x)).
% subst5a: strict occurrence of c in both M and N
subst5a : substp ([c] andr ([a] M c a) ([b] N c b) c) ([y] P y)
	   (cut ([c] andr ([a] M' a) ([b] N' b) c) ([y] P y))
	   <- ({a} substp ([c] M c a) ([y] P y) (M' a))
	   <- ({b} substp ([c] N c b) ([y] P y) (N' b)).
% subst5b: strict occurrence of c in M, but not N
subst5b : substp ([c] andr ([a] M c a) ([b] N b) c) ([y] P y)
	  (cut ([c] andr ([a] M' a) ([b] N b) c) ([y] P y))
	  <- ({a} substp ([c] M c a) ([y] P y) (M' a)).
% subst5c: strict occurrence of c in N but not M
subst5c : substp ([c] andr ([a] M a) ([b] N c b) c) ([y] P y)
	  (cut ([c] andr ([a] M a) ([b] N' b) c) ([y] P y))
	  <- ({b} substp ([c] N c b) ([y] P y) (N' b)).
% subst5d: no strict occurrce of c in M or N
subst5c : substp ([c] andr ([a] M a) ([b] N b) c) ([y] P y)
	  (cut ([c] andr ([a] M a) ([b] N b) c) ([y] P y)).
subst6_1a : substn ([y] andl1 ([x] M y x) y) ([c] P c)
	     (cut ([c] P c) ([y] andl1 ([x] M' x) y))
	     <- ({x} substn ([y] M y x) ([c] P c) (M' x)).
subst6_1b : substn ([y] andl1 ([x] M x) y) ([c] P c)
	     (cut ([c] P c) ([y] andl1 ([x] M x) y)).
subst6_2a : substn ([y] andl2 ([x] M y x) y) ([c] P c)
	     (cut ([c] P c) ([y] andl2 ([x] M' x) y))
	     <- ({x} substn ([y] M y x) ([c] P c) (M' x)).
subst6_2b : substn ([y] andl2 ([x] M x) y) ([c] P c)
	     (cut ([c] P c) ([y] andl2 ([x] M x) y)).
subst7_1a : substp ([c] orr1 ([a] M c a) c) ([y] P y)
	     (cut ([c] orr1 ([a] M' a) c) ([y] P y))
	     <- ({a} substp ([c] M c a) ([y] P y) (M' a)).
subst7_1b : substp ([c] orr1 ([a] M a) c) ([y] P y)
	     (cut ([c] orr1 ([a] M a) c) ([y] P y)).
subst7_2a : substp ([c] orr2 ([a] M c a) c) ([y] P y)
	     (cut ([c] orr2 ([a] M' a) c) ([y] P y))
	     <- ({a} substp ([c] M c a) ([y] P y) (M' a)).
subst7_2b : substp ([c] orr2 ([a] M a) c) ([y] P y)
	     (cut ([c] orr2 ([a] M a) c) ([y] P y)).
subst8a : substn ([z] orl ([x] M z x) ([y] N z y) z) ([c] P c)
	   (cut ([c] P c) ([z] orl ([x] M' x) ([y] N' y) z))
	   <- ({x} substn ([z] M z x) ([c] P c) (M' x))
	   <- ({y} substn ([z] N z y) ([c] P c) (N' y)).
subst8b : substn ([z] orl ([x] M z x) ([y] N y) z) ([c] P c)
	   (cut ([c] P c) ([z] orl ([x] M' x) ([y] N y) z))
	   <- ({x} substn ([z] M z x) ([c] P c) (M' x)).
subst8c : substn ([z] orl ([x] M x) ([y] N z y) z) ([c] P c)
	   (cut ([c] P c) ([z] orl ([x] M x) ([y] N' y) z))
	   <- ({y} substn ([z] N z y) ([c] P c) (N' y)).
subst8d : substn ([z] orl ([x] M x) ([y] N y) z) ([c] P c)
	   (cut ([c] P c) ([z] orl ([x] M x) ([y] N y) z)).
subst9a : substp ([b] impr ([x] [a] M b x a) b) ([y] P y)
	   (cut ([b] impr ([x] [a] M' x a) b) ([y] P y))
	   <- ({x} {a} substp ([b] M b x a) ([y] P y) (M' x a)).
subst9b : substp ([b] impr ([x] [a] M x a) b) ([y] P y)
	   (cut ([b] impr ([x] [a] M x a) b) ([y] P y)).
subst10a : substn ([y] impl ([a] M y a) ([x] N y x) y) ([c] P c)
	    (cut ([c] P c) ([y] impl ([a] M' a) ([x] N' x) y))
	    <- ({a} substn ([y] M y a) ([c] P c) (M' a))
	    <- ({x} substn ([y] N y x) ([c] P c) (N' x)).
subst10b : substn ([y] impl ([a] M y a) ([x] N x) y) ([c] P c)
	    (cut ([c] P c) ([y] impl ([a] M' a) ([x] N x) y))
	    <- ({a} substn ([y] M y a) ([c] P c) (M' a)).
subst10c : substn ([y] impl ([a] M a) ([x] N y x) y) ([c] P c)
	   (cut ([c] P c) ([y] impl ([a] M a) ([x] N' x) y))
	   <- ({x} substn ([y] N y x) ([c] P c) (N' x)).
subst10d : substn ([y] impl ([a] M a) ([x] N x) y) ([c] P c)
	    (cut ([c] P c) ([y] impl ([a] M a) ([x] N x) y)).

% subst11 impossible by strictness
% subst11p : substp ([b] axiom X A) ([y] P y) (axiom X A).
% subst11n : substn ([y] axiom X A) ([c] P c) (axiom X A).
subst12pa : substp ([b] cut ([a] M b a) ([x] N b x)) ([y] P y)
	     (cut ([a] M' a) ([x] N' x))
	     <- ({a} substp ([b] M b a) ([y] P y) (M' a))
	     <- ({x} substp ([b] N b x) ([y] P y) (N' x)).
subst12pb : substp ([b] cut ([a] M b a) ([x] N x)) ([y] P y)
	     (cut ([a] M' a) ([x] N x))
	     <- ({a} substp ([b] M b a) ([y] P y) (M' a)).
subst12pc : substp ([b] cut ([a] M a) ([x] N b x)) ([y] P y)
	     (cut ([a] M a) ([x] N' x))
	     <- ({x} substp ([b] N b x) ([y] P y) (N' x)).

subst12na : substn ([y] cut ([a] M y a) ([x] N y x)) ([c] P c)
	    (cut ([a] M' a) ([x] N' x))
	     <- ({a} substn ([y] M y a) ([c] P c) (M' a))
	     <- ({x} substn ([y] N y x) ([c] P c) (N' x)).
subst12nb : substn ([y] cut ([a] M y a) ([x] N x)) ([c] P c)
	    (cut ([a] M' a) ([x] N x))
	    <- ({a} substn ([y] M y a) ([c] P c) (M' a)).
subst12nc : substn ([y] cut ([a] M a) ([x] N y x)) ([c] P c)
	    (cut ([a] M a) ([x] N' x))
	    <- ({x} substn ([y] N y x) ([c] P c) (N' x)).

subst13p : substp ([b] notr ([x] M b x) A) ([y] P y) (notr ([x] M' x) A)
	    <- ({x} substp ([b] M b x) ([y] P y) (M' x)).
subst13n : substn ([y] notr ([x] M y x) A) ([c] P c) (notr ([x] M' x) A)
	    <- ({x} substn ([y] M y x) ([c] P c) (M' x)).
subst14p : substp ([b] notl ([a] M b a) X) ([y] P y) (notl ([a] M' a) X)
	    <- ({a} substp ([b] M b a) ([y] P y) (M' a)).
subst14n : substn ([y] notl ([a] M y a) X) ([c] P c) (notl ([a] M' a) X)
	    <- ({a} substn ([y] M y a) ([c] P c) (M' a)).

subst15pa : substp ([d] andr ([a] M d a) ([b] N d b) C) ([y] P y)
	    (andr ([a] M' a) ([b] N' b) C)
	    <- ({a} substp ([d] M d a) ([y] P y) (M' a))
	    <- ({b} substp ([d] N d b) ([y] P y) (N' b)).
subst15pb : substp ([d] andr ([a] M d a) ([b] N b) C) ([y] P y)
	     (andr ([a] M' a) ([b] N b) C)
	     <- ({a} substp ([d] M d a) ([y] P y) (M' a)).
subst15pc : substp ([d] andr ([a] M a) ([b] N d b) C) ([y] P y)
	     (andr ([a] M a) ([b] N' b) C)
	     <- ({b} substp ([d] N d b) ([y] P y) (N' b)).

subst15na : substn ([y] andr ([a] M y a) ([b] N y b) C) ([d] P d)
	    (andr ([a] M' a) ([b] N' b) C)
	    <- ({a} substn ([y] M y a) ([d] P d) (M' a))
	    <- ({b} substn ([y] N y b) ([d] P d) (N' b)).
subst15nb : substn ([y] andr ([a] M y a) ([b] N b) C) ([d] P d)
	    (andr ([a] M' a) ([b] N b) C)
	    <- ({a} substn ([y] M y a) ([d] P d) (M' a)).
subst15nc : substn ([y] andr ([a] M a) ([b] N y b) C) ([d] P d)
	    (andr ([a] M a) ([b] N' b) C)
	    <- ({b} substn ([y] N y b) ([d] P d) (N' b)).

subst16p_1 : substp ([c] andl1 ([x] M c x) Y) ([z] P z) (andl1 ([x] M' x) Y)
	      <- ({x} substp ([c] M c x) ([z] P z) (M' x)).
subst16n_1 : substn ([z] andl1 ([x] M z x) Y) ([c] P c) (andl1 ([x] M' x) Y)
	      <- ({x} substn ([z] M z x) ([c] P c) (M' x)).
subst16p_2 : substp ([c] andl2 ([x] M c x) Y) ([z] P z) (andl2 ([x] M' x) Y)
	      <- ({x} substp ([c] M c x) ([z] P z) (M' x)).
subst16n_2 : substn ([z] andl2 ([x] M z x) Y) ([c] P c) (andl2 ([x] M' x) Y)
	      <- ({x} substn ([z] M z x) ([c] P c) (M' x)).
subst17p_1 : substp ([c] orr1 ([a] M c a) B) ([y] P y) (orr1 ([a] M' a) B)
	      <- ({a} substp ([c] M c a) ([y] P y) (M' a)).
subst17n_1 : substn ([y] orr1 ([a] M y a) B) ([c] P c) (orr1 ([a] M' a) B)
	      <- ({a} substn ([y] M y a) ([c] P c) (M' a)).
subst17p_2 : substp ([c] orr2 ([a] M c a) B) ([y] P y) (orr2 ([a] M' a) B)
	      <- ({a} substp ([c] M c a) ([y] P y) (M' a)).
subst17n_2 : substn ([y] orr2 ([a] M y a) B) ([c] P c) (orr2 ([a] M' a) B)
	      <- ({a} substn ([y] M y a) ([c] P c) (M' a)).

subst18pa : substp ([c] orl ([x] M c x) ([y] N c y) Z) ([w] P w)
	    (orl ([x] M' x) ([y] N' y) Z)
	    <- ({x} substp ([c] M c x) ([w] P w) (M' x))
	    <- ({y} substp ([c] N c y) ([w] P w) (N' y)).
subst18pb : substp ([c] orl ([x] M c x) ([y] N y) Z) ([w] P w)
	    (orl ([x] M' x) ([y] N y) Z)
	    <- ({x} substp ([c] M c x) ([w] P w) (M' x)).
subst18pc : substp ([c] orl ([x] M x) ([y] N c y) Z) ([w] P w)
	    (orl ([x] M x) ([y] N' y) Z)
	    <- ({y} substp ([c] N c y) ([w] P w) (N' y)).

subst18na : substn ([w] orl ([x] M w x) ([y] N w y) Z) ([c] P c)
	    (orl ([x] M' x) ([y] N' y) Z)
	    <- ({x} substn ([w] M w x) ([c] P c) (M' x))
	    <- ({y} substn ([w] N w y) ([c] P c) (N' y)).
subst18nb : substn ([w] orl ([x] M w x) ([y] N y) Z) ([c] P c)
	    (orl ([x] M' x) ([y] N y) Z)
	    <- ({x} substn ([w] M w x) ([c] P c) (M' x)).
subst18nc : substn ([w] orl ([x] M x) ([y] N w y) Z) ([c] P c)
	    (orl ([x] M x) ([y] N' y) Z)
	    <- ({y} substn ([w] N w y) ([c] P c) (N' y)).
subst19p : substp ([c] impr ([x] [a] M c x a) B) ([y] P y)
	    (impr ([x] [a] M' x a) B)
	    <- ({x} {a} substp ([c] M c x a) ([y] P y) (M' x a)).
subst19n : substn ([y] impr ([x] [a] M y x a) B) ([c] P c)
	    (impr ([x] [a] M' x a) B)
	    <- ({x} {a} substn ([y] M y x a) ([c] P c) (M' x a)).
subst20pa : substp ([c] impl ([a] M c a) ([x] N c x) Y) ([z] P z)
	    (impl ([a] M' a) ([x] N' x) Y)
	    <- ({a} substp ([c] M c a) ([z] P z) (M' a))
	    <- ({x} substp ([c] N c x) ([z] P z) (N' x)).
subst20pb : substp ([c] impl ([a] M c a) ([x] N x) Y) ([z] P z)
	    (impl ([a] M' a) ([x] N x) Y)
	    <- ({a} substp ([c] M c a) ([z] P z) (M' a)).
subst20pc : substp ([c] impl ([a] M a) ([x] N c x) Y) ([z] P z)
	    (impl ([a] M a) ([x] N' x) Y)
	    <- ({x} substp ([c] N c x) ([z] P z) (N' x)).
subst20na : substn ([z] impl ([a] M z a) ([x] N z x) Y) ([c] P c)
	    (impl ([a] M' a) ([x] N' x) Y)
	    <- ({a} substn ([z] M z a) ([c] P c) (M' a))
	    <- ({x} substn ([z] N z x) ([c] P c) (N' x)).
subst20nb : substn ([z] impl ([a] M z a) ([x] N x) Y) ([c] P c)
	    (impl ([a] M' a) ([x] N x) Y)
	    <- ({a} substn ([z] M z a) ([c] P c) (M' a)).
subst20nc : substn ([z] impl ([a] M a) ([x] N z x) Y) ([c] P c)
	    (impl ([a] M a) ([x] N' x) Y)
	    <- ({x} substn ([z] N z x) ([c] P c) (N' x)).

%terminates D (substp D E _).
%terminates D (substn D E _).

% Commuting cuts
-c-> : # -> # -> type.
%infix none 10 -c->.
%mode -c-> +D -E.

% side condition: M does not freshly introduce a?
com_l : (cut ([a] M a) ([x] N x)) -c-> P
	 <- substp ([a] M a) ([x] N x) P.

% side condition: N does not freshly introduce x?
com_r : (cut ([a] M a) ([x] N x)) -c-> P
	 <- substn ([x] N x) ([a] M a) P.

%terminates [] (-c-> D _).

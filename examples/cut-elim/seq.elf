%%% Strongly normalising system for cut elimination
%%% Sequent calculus
%%% Author: Frank Pfenning
%%% Implementing Urban & Bierman'01

%%% Propositions
o : type.
%name o A.

not    : o -> o.       %prefix 12 not.
and    : o -> o -> o.  %infix right 11 and.
or     : o -> o -> o.  %infix right 11 or.
imp    : o -> o -> o.  %infix right 10 imp.

%%% Classical Sequent Calculus
# : type.         % Token (for contradiction)
neg : o -> type.  % Hypotheses (left)
pos : o -> type.  % Conclusions (right)
%name # D.
%name neg N.
%name pos P.

% Axiom
axiom : (neg A -> pos A -> #).

cut : (pos A -> #)
       -> (neg A -> #)
       -> #.

% Negation
notl  : (pos A -> #)
	  -> (neg (not A) -> #).

notr  : (neg A -> #)
	  -> (pos (not A) -> #).

% Conjunction
andl1 : (neg A -> #)
	  -> (neg (A and B) -> #).

andl2 : (neg B -> #)
	  -> (neg (A and B) -> #).

andr  : (pos A -> #)
	  -> (pos B -> #)
	  -> (pos (A and B) -> #).

% Disjunction
orl   : (neg A -> #)
	 -> (neg B -> #)
	 -> (neg (A or B) -> #).

orr1  : (pos A -> #)
	 -> (pos (A or B) -> #).

orr2  : (pos B -> #)
	  -> (pos (A or B) -> #).

% Implication
impl  : (pos A -> #)
	  -> (neg B -> #)
	  -> (neg (A imp B) -> #).

impr  : (neg A -> pos B -> #)
	  -> (pos (A imp B) -> #).

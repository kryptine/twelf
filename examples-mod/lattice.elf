%sig FOL = {
  i : type.
  o : type.
  true : o -> type.
  %% ...
}.

%sig Semigroup = {
  %include FOL.
  comp : FOL.i -> FOL.i -> FOL.i.
  %% assoc : ...
}.

%sig Monoid = {
  %include FOL.
  %struct sgr : Semigroup = {}.
  unit : FOL.i.
  %% unit-left : ...
  %% unit-right : ...
}.

%sig Order = {
  %include FOL.
  leq : FOL.i -> FOL.i -> FOL.o.
  %% refl : ...
  %% antisym : ...
  %% trans : ...
}.

%view Opposite : Order -> Order = {
  leq := [x][y] (leq y x).
  %% refl := ...
  %% antisym := ...
  %% trans := ...
}.

%sig Semilattice = {
  %include FOL.
  %struct ord : Order = {}.
  %struct sg : Semigroup = {}.
  %% actually we should use commutative semigroups here
}.

%sig Lattice = {
  %include FOL.
  %struct min : Semilattice = {}.
  %struct max : Semilattice = {%struct ord := Opposite min.ord.}.
  /\ = min.sg.comp.
  \/ = max.sg.comp.
}.

%% lattice with least and greatest elements (by using monoids instead of semigroups)
%sig LGLattice = {
  %include FOL.
  %struct lat : Lattice = {}.
  %struct min : Monoid = {%struct sgr := lat.min.sg.}.
  %struct max : Monoid = {%struct sgr := lat.max.sg.}.
  /\ = lat./\.
  \/ = lat.\/.
  bot = min.unit.
  top = max.unit.
}.
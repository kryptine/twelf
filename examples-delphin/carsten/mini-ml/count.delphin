(* Delphin test file.  Functions related to Mini-ML
   Author: Carsten Schuermann
*)


id :: world (base)
	all {N:exp} exists {M:exp} true

fun id X = <X, <>>
  | id X = <X, <>>
  | id X = <X, <>>
  | id X = <X, <>>
  | id X = <X, <>>
  | id X = 
    let val <X, <>> = id X
    in 	<X, <>>
    end

id2 :: world (base)
	all {N:exp} all {M:exp} exists {Y:exp} true

fun id2 X Y = <X, <>>



add :: world (base) 
	all {N:exp} all {M:exp} exists {K:exp} true

fun add (A.z) M = <M, <>>
  | add ((A.s) N) M = 
    let 
	val <K, <>> = add N M
    in	
	<(A.s) K, <>>
    end


id :: world (base)
	all {N:exp} exists {M:exp} true
fun id X = <X, <>>

new (b:base')

val <X, <>> = add (b.z) (b.z) 
val <Y, <>> = id (b.z) 


count :: world (param base)
	  all^ {e:exp} all^ {t:tp} all {P : of e t} 
	  exists {N : exp} true

fun count (B.of_z) = <B.z, <>>


  | count ((A:param' T).u) = 
    choose (B:base')
    in 
      <(B.s) (B.z), <>>
    end

  | count ((B.of_fn) T1 T2 E P) =
    new (a: param' T1)
    in
      count (P (a.x) (a.u))
    end
  | count ((B.of_fix) T E D) = 
    new (a: param' T)
    in
      count (D (a.x) (a.u))
    end
  | count ((B.of_s) E P) = count P 
  | count ((B.of_app) E1 E2 T1 T2 D1 D2) = 
    let 
      val <N1, <>> = count D1 
      val <N2, <>> = count D2
    in
      add N1 N2
    end

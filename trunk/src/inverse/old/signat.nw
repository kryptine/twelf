% -*- mode: Noweb; noweb-code-mode: sml-mode -*-

<<exceptions>>=
  exception Signat of string

@ 
Shall we make signatures destructive or persistant?
This seems like a question to resolve later, when
we have data for both cases.  Thus, the (SML) signature
should reflect that either is possible as an implementation.

<<signat.sig>>=

signature SIGNAT =
sig
  type key
  type 'a sgn
  <<exceptions>>
  val empty : unit -> 'a sgn
  val insert : 'a sgn -> key * 'a -> 'a sgn (* raises Signat if key is not fresh*)
  val lookup : 'a sgn -> key -> 'a (* raises Signat if not present *)
  val size : 'a sgn -> int
  (* val array : 'a sgn -> 'a array *)
end

<<signat.sml>>=
structure ListSignat : SIGNAT where type key = int =
struct 

  structure L = Lib
  type key = int
  type 'a sgn = (key * 'a) list

  <<exceptions>>
                      
  fun empty() = []

  fun insert sgn (p as (k,a)) = 
      if L.exists (fn (k',_) => k = k') sgn
      then raise Signat "insert: signat contains key"
      else p::sgn

  fun lookup sgn x = 
      case L.assoc x sgn of 
        SOME y => y
      | NONE => raise Signat "lookup: no such key"

  fun size l = length l

(*   fun array l = (Array.fromList o map L.snd) l *)

end

@ 

<<signat.sml>>=
structure GrowarraySignat : SIGNAT where type key = int =
struct
  
  structure L = Lib
  structure G = GrowArray

  type key = int
  type 'a sgn = {arr : 'a G.growarray,
                 size : int ref}

  <<exceptions>>
                      
  val size = ref 0

  fun empty() = {arr = G.empty(),
                 size = ref 0}

  fun insert (sgn:('a sgn)) (n,v) =
      if G.length (#arr sgn) > n
      then raise Signat "insert: signat contains key"
      else
        (G.update (#arr sgn) n v;
         (if n > !(#size sgn) then (#size sgn) := n else ());
         sgn)

  fun lookup (sgn:'a sgn) n = G.sub (#arr sgn) n

  fun size (sgn:'a sgn) = !(#size sgn)

(*   fun array (sgn:'a sgn) = G.finalize (#arr sgn) *)

end

(* 
structure HashSignat : SIGNAT =
struct

  structure L = Lib
  structure H = HashTable

  type (''a,'b) sgn = (''a ,'b) H.hash_table

  val hash_fn : string->word = HashString.hashString

  fun cmp_fn : string*string->bool = (op =)

  val empty


end
*) 

structure Signat = GrowarraySignat

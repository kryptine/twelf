%sig Order = {
  %include FOL.
  leq : FOL.i -> FOL.i -> FOL.o.
  %infix none 4 leq.
  %%refl : FOL.ded FOL.forall [x] (x leq x).
  %%antisym : FOL.ded FOL.forall [x] (FOL.forall [y] (x leq y FOL.and y leq x FOL.=> x FOL.== y)).
  %%trans : FOL.ded FOL.forall [x] (FOL.forall [y] (FOL.forall [z] (x leq y FOL.and y leq z FOL.=> x leq z))).
}.

%view Opposite : Order -> Order = {
  leq := [x][y] (y leq x).
  %% refl := ...
  %% antisym := ...
  %% trans := ...
}.

%sig Semilattice = {
  %include FOL.
  %struct sgc : SemigroupCommut.
  %struct midem : MagmaIdempotent = {%struct mag := sgc.sg.mag.}.
  /\ = [x] [y] (x sgc.sg.mag.* y).
  %infix none 5 /\. 
  %struct ord : Order.
  ax : FOL.ded FOL.forall [x] (FOL.forall [y] (x /\ y FOL.== x FOL.<=> x ord.leq y)).   
}.

%sig SemilatticeBounded = {
  %include FOL.
  %struct sl : Semilattice.
  %struct mon : Monoid = {%struct sg := sl.sgc.sg.}.
}.

%sig Lattice = {
  %include FOL.
  %struct meet : Semilattice = {}.
  %struct join : Semilattice = {%struct ord := Opposite meet.ord.}.
  /\ = [x][y] x meet.sgc.sg.mag.* y.
  \/ = [x][y] x join.sgc.sg.mag.* y.
}.

%sig LatticeBounded = {
  %include FOL.
  %struct lat : Lattice = {}.
  %struct meetBdd : SemilatticeBounded = {%struct sl := lat.meet.}. 
  %struct joinBdd : SemilatticeBounded = {%struct sl := lat.join.}. 
  bot = meetBdd.mon.e.
  top = joinBdd.mon.e.
}.
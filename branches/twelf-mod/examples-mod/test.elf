%% testing basic syntax
%sig R = {
  a : type.
  c : a.
}.

%% testing basic semantics, note why "test" is well-typed
%sig S = {
  a' : type.
  b' : a'.
  b'2: a'.
  %struct r' : R = {a := a'.}.
  c' : r'.a.
  d' : a' -> type.
  test : d' c'.
}.

%% testing instantiations of structures, try removing the instantantion of a'
%sig T = {
  a'' : type.
  b'' = a'' -> a''.
  %struct r'' : R = {a := a'' -> a''.}.
  %struct s'': S = {a' := b''. %struct r' := r''.}.
}.

%% testing a deep instantiation, i.e, r''.c := f''', also try removing the instantiation of a''
%% note that the order of instantiations in a structure is not relevant
%sig U = {
  a''' : type.
  f''' : a''' -> a'''.
  %struct t''' : T = {r''.c := f'''. a'' := a'''.}.
}.

%% testing views
%view V : R -> R = {
  a := a -> a.
  c := [x] c.
}.

%% testing views with structure instantiations; not so easy to type-check by hand anymore
%% note that type reconstruction works
%view W : S -> T = {
  a' := a'' -> a''.
  b' := [x] x.
  b'2 := r''.c.
  %struct r' := r''.
  c' := s''.c'.
  d' := [x: b''] (a'' -> s''.d' x).
  test := [x] s''.test.
}.

%% testing includes and subordination
%sig R' = {
  %include R .
  a' : type.
  %% no subordination between R.a and R'.a'
}.

%sig R'' = {
  %include R'.
  f : R.a -> R'.a'.   %% creates subordination
}.

%% testing opens
%sig X = {
  %include R %open a c.
  d = c : a.
  %struct s : S %open a' b'.
  e = b' : a'.
}.
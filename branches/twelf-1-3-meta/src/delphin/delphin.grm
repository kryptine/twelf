
(* s is a string consisting of an identifier, followed by one or more 
   whitespace characters other than newlines, followed by "::" *)
fun chop s = 
    let 
      fun stripws s' =
          let 
            val last = String.sub (s', size(s')-1)
          in
             case last 
               of #" "  => stripws (substring (s', 0, (size(s')-1))) 
                | #"\t" => stripws (substring (s', 0, (size(s')-1))) 
                | c     => s'
          end
    in stripws (substring (s, 0, size(s)-2))
    end 
  

structure D = DextSyn'
structure L = Lexer

%%

%name Delphin
%pos int
%header (functor DelphinLrValsFun (structure Token : TOKEN
                                   structure DextSyn' : DEXTSYN))
%eop EOF
%noshift EOF
%verbose


%term    ID of string 
       | COLON 
       | DOT 
       | EQUAL 
       | DBLCOLON 
       | BLOCKDEC 
       | BLOCK of string
       | VAL 
       | FUN
       | CASE
       | OF
       | BAR
       | LET 
       | IN 
       | END 
       | NEW 
       | SOME of string 
       | ALL 
       | EXISTS
       | TYPE  
       | RTARROW  
       | LTARROW 
       | RTPAREN  
       | LTPAREN
       | RTBRACKET  
       | LTBRACKET  
       | RTBRACE 
       | LTBRACE  
       | AND 
       | DBLARROW  
       | COMMA  
       | EOF 
       | LTANGLE 
       | RTANGLE 
       | TRUE 
       | UNIT 
       | LLAM 
       | RLAM 
       | AT 
       | UNDERSCORE
       | WORLD
       | PREC1 
       | FORMID of string
       | PREC0

%nonterm    start of D.Ast
          | decs of D.Decs 
          | formdecl of D.FormDecl
	  | fundecl of D.FunDecl
          | valdecl of D.ValDecl
          | block of string 
          | term of string 
          | cases of D.Cases 
          | dec of string 
          | worlds of string list
          | form of D.Form
          | head of D.Head
          | mdec of D.MDec 
          | pat of D.Pat  
          | prog of D.Prog
	  | world of string
	  | world' of string
          | id of string


%left UNDERSCORE
%left COLON 
%left LTARROW 
%left AT
%left PREC0
%left PREC1
%left AND

%right DBLCOLON
%right ID TRUE ALL EXISTS VAL FUN CASE OF BAR LET IN END NEW
%right RTARROW DBLARROW 

%nonassoc LTBRACE RTBRACE LTBRACKET RTBRACKET LLAM RLAM
%nonassoc LTPAREN RTPAREN LTANGLE RTANGLE


%%

start     : decs                 	               (D.Ast decs)
          
decs      :             		               (D.Empty)
          | fundecl decs         	               (D.FunDecl (fundecl, decs))  
          | formdecl decs        	               (D.FormDecl (formdecl, decs))  
          | valdecl decs         	               (D.ValDecl (valdecl, decs))    

formdecl  : FORMID form	                               (D.Form (chop (FORMID), form))

fundecl   : FUN head EQUAL prog %prec PREC1            (D.Fun (head, prog))
          | BAR head EQUAL prog %prec PREC1            (D.Bar (head, prog)) 

valdecl   : VAL pat DBLCOLON form EQUAL prog %prec ID  (D.Val (pat, prog, SOME form))
	  | VAL pat EQUAL prog %prec ID                (D.Val (pat, prog, NONE))

block     : LTBRACE dec RTBRACE                        ("{" ^ dec ^ "} ")
          | block LTBRACE dec RTBRACE                  (block ^ " " ^ "{" ^ dec ^ "}")

term      : TYPE                                       ("type ")
          | ID                 	            	       (ID ^ " ")   
          | TRUE                                       ("true ")
          | AND                                        ("and ")
          | ALL                                        ("all ")
          | EXISTS                                     ("exists ")
          | VAL                                        ("val ") 
          | FUN                                        ("fun ")
          | CASE                                       ("case ")
          | OF                                         ("of ")
          | BAR                                        ("bar ")
          | LET                                        ("let ") 
          | IN                                         ("in ")
          | END                                        ("end ")
          | NEW                                        ("new ")
          | term RTARROW term                 	       (term1 ^ " -> " ^ term2) 
          | term LTARROW term                 	       (term1 ^ " <- " ^ term2)  
          | LTBRACE dec RTBRACE term          	       ("{" ^ dec ^ "} " ^ term) 
          | LTBRACKET dec RTBRACKET term      	       ("[" ^ dec ^ "] " ^ term) 
          | LTPAREN term RTPAREN              	       ("(" ^ term ^ ") ")  
          | ID term                           	       (ID ^ " " ^ term)   
          | TRUE term                                  ("true " ^ term)
          | AND term                                   ("and " ^ term)
          | ALL term                                   ("all " ^ term)
          | EXISTS term                                ("exists " ^ term)
          | VAL term                                   ("val " ^ term)
          | FUN term                                   ("fun " ^ term)
          | CASE term                                  ("case " ^ term)
          | OF term                                    ("of " ^ term)
          | BAR term                                   ("bar " ^ term)
          | LET term                                   ("let " ^ term)
          | IN term                                    ("in " ^ term)
          | END term                                   ("end " ^ term)
          | NEW term                                   ("new " ^ term)  
          | UNDERSCORE term                   	       ("_ " ^ term)
          | LTPAREN term RTPAREN term         	       ("(" ^ term1 ^ ") " ^ term2)
          | term COLON term                   	       (term1 ^ " : " ^ term2)  
          | UNDERSCORE                        	       ("_ ")  

world     : LTPAREN world'                             ("(" ^ world')

world'    : ID BAR world'                              (ID ^ " | " ^ world')
	  | ID RTPAREN                                 (ID ^ ")")

dec       : ID COLON term                              (ID ^ " : " ^ term)
          | ID                               	       (ID)  

form      : WORLD world form  %prec UNDERSCORE         (D.World (world, form))
	  | ALL LTBRACE dec RTBRACE form   	       (D.Forall (dec, form))
          | EXISTS LTBRACE dec RTBRACE form   	       (D.Exists (dec, form))
          | form AND form  (*%prec AND*)               (D.And (form1, form2))
          | LTPAREN form RTPAREN              	       (form)
          | TRUE                                       (D.True)

prog      : ID                                         (D.Const (ID))
          | prog ID              	               (D.AppTerm (prog, ID)) 
          | prog UNDERSCORE                   	       (D.AppTerm (prog, "_"))
          | prog LTPAREN term RTPAREN         	       (D.AppTerm (prog, term))   
          | LTPAREN prog RTPAREN              	       (prog)
          | UNIT                              	       (D.Unit)
	  | CASE prog OF cases                         (D.Unit)
          | LTPAREN prog COMMA prog RTPAREN   	       (D.Pair (prog1, prog2))   
          | prog AT prog                      	       (D.AppProg (prog1, prog2))
          | LTANGLE term COMMA prog RTANGLE   	       (D.Inx (term, prog))  
          | LLAM term RLAM prog               	       (D.Lam (term, prog))   
          | LET decs IN prog END              	       (D.Let (decs, prog)) 
	  | NEW block IN prog END	               (D.New (block, prog))

cases     : pat DBLARROW prog  %prec PREC0                        (D.First (pat, prog))
          | cases BAR pat DBLARROW prog %prec PREC1    (D.Alt  (cases, pat, prog)) 

head      : ID                       		       (D.Head (ID))
          | head ID                           	       (D.AppLF (head, D.Term ID))     
          | head UNDERSCORE                   	       (D.AppLF (head, D.Term "_"))
          | head LTPAREN term RTPAREN         	       (D.AppLF (head, D.Term term))
          | head AT pat                       	       (D.AppMeta (head, pat))

mdec      : ID                                         (D.MDec (ID, NONE))
          | FORMID form                      	       (D.MDec (chop (FORMID), SOME (form)))
         
pat       : mdec                                       (D.PatVar (mdec))
          | LTPAREN pat COMMA pat RTPAREN     	       (D.PatPair (pat1, pat2))
          | LTANGLE term COMMA pat RTANGLE    	       (D.PatInx (D.Term term, pat))
          | UNIT                              	       (D.PatUnit)
          | UNDERSCORE                        	       (D.PatUnderscore)




















